"use strict";(self.webpackChunkdocusaurus_code=self.webpackChunkdocusaurus_code||[]).push([[9836],{56758:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>p,frontMatter:()=>a,metadata:()=>i,toc:()=>h});const i=JSON.parse('{"id":"mutation/save-command/optimistic-locking","title":"Optimistic Locking","description":"Discussion Prerequisites","source":"@site/docs/mutation/save-command/optimistic-locking.mdx","sourceDirName":"mutation/save-command","slug":"/mutation/save-command/optimistic-locking","permalink":"/jimmer-doc/docs/mutation/save-command/optimistic-locking","draft":false,"unlisted":false,"editUrl":"https://github.com/babyfish-ct/jimmer-doc/edit/main/docs/mutation/save-command/optimistic-locking.mdx","tags":[],"version":"current","lastUpdatedAt":1734119103000,"sidebarPosition":8,"frontMatter":{"sidebar_position":8,"title":"Optimistic Locking"},"sidebar":"tutorialSidebar","previous":{"title":"Constraint Violation Error Handling","permalink":"/jimmer-doc/docs/mutation/save-command/investigation"},"next":{"title":"Pessimistic Locking","permalink":"/jimmer-doc/docs/mutation/save-command/pessimistic-locking"}}');var s=t(74848),o=t(28453),r=t(11470),l=t(19365);const a={sidebar_position:8,title:"Optimistic Locking"},c=void 0,d={},h=[{value:"Discussion Prerequisites",id:"discussion-prerequisites",level:2},{value:"Built-in Optimistic Lock",id:"built-in-optimistic-lock",level:2},{value:"Defining the Optimistic Lock Property",id:"defining-the-optimistic-lock-property",level:3},{value:"Ignoring Optimistic Lock",id:"ignoring-optimistic-lock",level:3},{value:"Using Optimistic Lock",id:"using-optimistic-lock",level:3},{value:"Optimistic Lock Exception",id:"optimistic-lock-exception",level:3},{value:"Custom Optimistic Lock",id:"custom-optimistic-lock",level:2},{value:"Composite Optimistic Lock",id:"composite-optimistic-lock",level:2},{value:"Specifying the Version Property",id:"specifying-the-version-property",level:3},{value:"Not Specifying the Version Property",id:"not-specifying-the-version-property",level:3}];function u(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"discussion-prerequisites",children:"Discussion Prerequisites"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Once an entity object has optimistic locking, Jimmer will give up the database's native upsert capability. It will use select queries to determine whether the subsequent operation should be ",(0,s.jsx)(n.code,{children:"insert"})," or ",(0,s.jsx)(n.code,{children:"update"}),", and inform users that the query reason is ",(0,s.jsx)(n.code,{children:"QueryReason.OPTIMISTIC_LOCK"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"Therefore, discussing upsert scenarios is meaningless for this article. To simplify the documentation, all examples in this article will demonstrate update behavior."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Whether the saved object is an aggregate root or a deep associated object, the optimistic lock processing logic is exactly the same."}),"\n",(0,s.jsx)(n.p,{children:"Therefore, to simplify the documentation, this article only discusses saving simple objects rather than complex data structures."}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Jimmer has three types of optimistic locks:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Built-in optimistic lock"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Custom optimistic lock"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Composite optimistic lock"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"That is, using both built-in and custom optimistic locks simultaneously"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"built-in-optimistic-lock",children:"Built-in Optimistic Lock"}),"\n",(0,s.jsx)(n.h3,{id:"defining-the-optimistic-lock-property",children:"Defining the Optimistic Lock Property"}),"\n",(0,s.jsxs)(n.p,{children:["Built-in optimistic lock requires first adding an integer field to the data table, then defining a property decorated with ",(0,s.jsx)(n.code,{children:"@org.babyfish.jimmer.sql.Version"})," annotation to map it, as shown below:"]}),"\n",(0,s.jsxs)(r.A,{groupId:"language",children:[(0,s.jsx)(l.A,{value:"java",label:"Java",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",metastring:'title="BookStore.java"',children:"@Entity\npublic interface BookStore {\n\n    // highlight-next-line\n    @Version\n    int version();\n\n    ...other properties omitted...\n}\n"})})}),(0,s.jsx)(l.A,{value:"kotlin",label:"Kotlin",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",metastring:'title="BookStore.kt"',children:"@Entity\ninterface BookStore {\n\n    // highlight-next-line\n    @Version\n    val version: Int\n\n    ...other properties omitted...\n}\n"})})})]}),"\n",(0,s.jsxs)(n.admonition,{type:"info",children:[(0,s.jsx)(n.p,{children:"For insert operations, when the version property of the entity object is not specified:"}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["If the ",(0,s.jsx)(n.code,{children:"@Default"})," annotation is also specified, the configured value will be inserted"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Otherwise, 0 will be inserted"}),"\n"]}),"\n"]})]}),"\n",(0,s.jsx)(n.h3,{id:"ignoring-optimistic-lock",children:"Ignoring Optimistic Lock"}),"\n",(0,s.jsxs)(n.p,{children:["If the ",(0,s.jsx)(n.code,{children:"version"})," property of the entity object being saved is not specified, then the built-in optimistic lock will be ignored, as shown below:"]}),"\n",(0,s.jsxs)(r.A,{groupId:"language",children:[(0,s.jsx)(l.A,{value:"java",label:"Java",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'List<BookStore> stores = Arrays.asList(\n    Immutables.createBookStore(draft -> {\n        draft.setId(1L);\n        draft.setWebsite("https://www.oreilly.com");\n        // highlight-next-line\n        // `version` property not specified\n    }),\n    Immutables.createBookStore(draft -> {\n        draft.setId(2L);\n        draft.setWebsite("https://www.manning.com");\n        // highlight-next-line\n        // `version` property not specified\n    })\n);\n\nsqlClient.updateEntities(stores);\n'})})}),(0,s.jsx)(l.A,{value:"kotlin",label:"Kotlin",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:'val stores = listOf(\n    BookStore {\n        id = 1L\n        website = "https://www.oreilly.com"\n        // highlight-next-line\n        // `version` property not specified\n    },\n    BookStore {\n        id = 2L\n        website = "https://www.manning.com"\n        // highlight-next-line\n        // `version` property not specified\n    }\n)\n\nsqlClient.updateEntities(stores)\n'})})})]}),"\n",(0,s.jsx)(n.p,{children:"This generates the following SQL:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"update BOOK_STORE\nset\n    WEBSITE = ?\n    -- highlight-next-line\n    /* VERSION not updated */\nwhere\n    ID = ?\n    -- highlight-next-line\n    /* VERSION not checked */\n/* batch-0: [https://www.oreilly.com, 1] */\n/* batch-1: [https://www.manning.com, 2] */\n"})}),"\n",(0,s.jsx)(n.h3,{id:"using-optimistic-lock",children:"Using Optimistic Lock"}),"\n",(0,s.jsxs)(n.p,{children:["If the ",(0,s.jsx)(n.code,{children:"version"})," property of the entity object being saved is specified, then the built-in optimistic lock will take effect, as shown below:"]}),"\n",(0,s.jsxs)(r.A,{groupId:"language",children:[(0,s.jsx)(l.A,{value:"java",label:"Java",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'List<BookStore> stores = Arrays.asList(\n    Immutables.createBookStore(draft -> {\n        draft.setId(1L);\n        draft.setWebsite("https://www.oreilly.com");\n        // highlight-next-line\n        draft.setVersion(0);\n    }),\n    Immutables.createBookStore(draft -> {\n        draft.setId(2L);\n        draft.setWebsite("https://www.manning.com");\n        // highlight-next-line\n        draft.setVersion(0);\n    })\n);\n\nsqlClient.updateEntities(stores);\n'})})}),(0,s.jsx)(l.A,{value:"kotlin",label:"Kotlin",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:'val stores = listOf(\n    BookStore {\n        id = 1L\n        website = "https://www.oreilly.com"\n        // highlight-next-line\n        version = 0\n    },\n    BookStore {\n        id = 2L\n        website = "https://www.manning.com"\n        // highlight-next-line\n        version = 0\n    }\n)\n\nsqlClient.updateEntities(stores)\n'})})})]}),"\n",(0,s.jsx)(n.p,{children:"This generates the following SQL:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"update BOOK_STORE\nset\n    WEBSITE = ?,\n    --highlight-next-line\n    VERSION = VERSION + 1\nwhere\n    ID = ?\nand\n    --highlight-next-line\n    VERSION = ?\n/* batch-0: [https://www.oreilly.com, 1, 0] */\n/* batch-1: [https://www.manning.com, 2, 0] */\n"})}),"\n",(0,s.jsx)(n.h3,{id:"optimistic-lock-exception",children:"Optimistic Lock Exception"}),"\n",(0,s.jsx)(n.p,{children:"Let's slightly modify the previous example by setting an incorrect version value for the second object, as shown below:"}),"\n",(0,s.jsxs)(r.A,{groupId:"language",children:[(0,s.jsx)(l.A,{value:"java",label:"Java",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'List<BookStore> stores = Arrays.asList(\n    Immutables.createBookStore(draft -> {\n        draft.setId(1L);\n        draft.setWebsite("https://www.oreilly.com");\n        draft.setVersion(0);\n    }),\n    Immutables.createBookStore(draft -> {\n        draft.setId(2L);\n        draft.setWebsite("https://www.manning.com");\n        // Providing incorrect version\n        // highlight-next-line\n        draft.setVersion(999);\n    })\n);\n\nsqlClient.updateEntities(stores);\n'})})}),(0,s.jsx)(l.A,{value:"kotlin",label:"Kotlin",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:'val stores = listOf(\n    BookStore {\n        id = 1L\n        website = "https://www.oreilly.com"\n        version = 0\n    },\n    BookStore {\n        id = 2L\n        website = "https://www.manning.com"\n        // Providing incorrect version\n        // highlight-next-line\n        version = 999\n    }\n)\n\nsqlClient.updateEntities(stores)\n'})})})]}),"\n",(0,s.jsx)(n.p,{children:"When executed again, you'll get the following exception:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:'#highlight-next-line\norg.babyfish.jimmer.sql.exception.SaveException$OptimisticLockError: \n    Save error caused by the path: "<root>": \n    Cannot update the entity whose type is \n    "com.yourcompany.yourproject.model.BookStore" and id is "2" \n    #highlight-next-line\n    because of optimistic lock error\n'})}),"\n",(0,s.jsx)(n.h2,{id:"custom-optimistic-lock",children:"Custom Optimistic Lock"}),"\n",(0,s.jsxs)(n.p,{children:["Custom optimistic lock doesn't require adding any version property to the entity object. Instead, it configures the save instruction using the ",(0,s.jsx)(n.code,{children:"setOptimisticLock"})," method, as shown below:"]}),"\n",(0,s.jsxs)(r.A,{groupId:"language",children:[(0,s.jsx)(l.A,{value:"java",label:"Java",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'List<BookStore> stores = Arrays.asList(\n        Immutables.createBookStore(draft -> {\n            draft.setId(1L);\n            draft.setWebsite("https://www.oreilly.com");\n        }),\n        Immutables.createBookStore(draft -> {\n            draft.setId(2L);\n            draft.setWebsite("https://www.manning.com");\n        })\n);\n\nsqlClient\n    .saveEntitiesCommand(stores)\n    .setMode(SaveMode.UPDATE_ONLY)\n    // highlight-next-line\n    .setOptimisticLock(\n        BookStoreTable.class,\n        (table, factory) -> {\n            return Predicate.sql(\n                "coalesce(length(%e), 0) <= length(%e)",\n                new Expression<?>[]{\n                    table.website(),\n                    factory.newString(\n                            BookStoreProps.WEBSITE\n                    )\n                }\n            );\n        }\n    )\n    .execute();\n'})})}),(0,s.jsx)(l.A,{value:"kotlin",label:"Kotlin",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:'val stores = listOf(\n        BookStore {\n            id = 1L\n            website = "https://www.oreilly.com"\n        },\n        BookStore {\n            id = 2L\n            website = "https://www.manning.com"\n        }\n    )\n\n    sqlClient.updateEntities(stores) {\n        // highlight-next-line\n        setOptimisticLock(BookStore::class) {\n            sql("coalesce(length(%e), 0) <= length(%e)") {\n                expression(table.website)\n                expression(newNullable(BookStore::website))\n            }\n        }\n    }\n'})})})]}),"\n",(0,s.jsx)(n.p,{children:"Here, the custom optimistic lock condition is: the length of the old website must be less than or equal to the length of the new website."}),"\n",(0,s.jsx)(n.p,{children:"Note that there are significant differences between Java and Kotlin code:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["First parameter of ",(0,s.jsx)(n.code,{children:"setOptimisticLock"})," method"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Java: Table type generated during apt compilation"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Kotlin: Entity type"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Since we're updating a batch of objects rather than a single object, getting the new value for update requires using a special API"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Java: ",(0,s.jsx)(n.code,{children:"factory.newString"})," gets the string type expression for update"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Kotlin: ",(0,s.jsx)(n.code,{children:"newNullable"})," gets the nullable expression for update"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"This generates the following SQL:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"update BOOK_STORE\nset\n    WEBSITE = ?\nwhere\n    ID = ?\nand \n    --highlight-start\n    coalesce(length(WEBSITE), 0) <= length(?)\n--highlight-end\n/* batch-0: [https://www.oreilly.com, 1, https://www.oreilly.com] */\n/* batch-1: [https://www.manning.com, 2, https://www.manning.com] */\n"})}),"\n",(0,s.jsx)(n.p,{children:"If these two records violate the custom optimistic lock condition, you'll get the following exception:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:'#highlight-next-line\norg.babyfish.jimmer.sql.exception.SaveException$OptimisticLockError: \n    Save error caused by the path: "<root>": \n    Cannot update the entity whose type is \n    "com.yourcompany.yourproject.model.BookStore" and id is "2" \n    #highlight-next-line\n    because of optimistic lock error\n'})}),"\n",(0,s.jsx)(n.h2,{id:"composite-optimistic-lock",children:"Composite Optimistic Lock"}),"\n",(0,s.jsx)(n.p,{children:"A composite optimistic lock means using both built-in optimistic lock and custom optimistic lock simultaneously."}),"\n",(0,s.jsx)(n.h3,{id:"specifying-the-version-property",children:"Specifying the Version Property"}),"\n",(0,s.jsxs)(r.A,{groupId:"language",children:[(0,s.jsx)(l.A,{value:"java",label:"Java",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'List<BookStore> stores = Arrays.asList(\n    Immutables.createBookStore(draft -> {\n        draft.setId(1L);\n        draft.setWebsite("https://www.oreilly.com");\n        // highlight-next-line\n        draft.setVersion(0);\n    }),\n    Immutables.createBookStore(draft -> {\n        draft.setId(2L);\n        draft.setWebsite("https://www.manning.com");\n        // highlight-next-line\n        draft.setVersion(0);\n    })\n);\n\nsqlClient\n    .saveEntitiesCommand(stores)\n    .setMode(SaveMode.UPDATE_ONLY)\n    .setOptimisticLock(\n        BookStoreTable.class,\n        (table, factory) -> {\n            return Predicate.sql(\n                "coalesce(length(%e), 0) <= length(%e)",\n                new Expression<?>[]{\n                        table.website(),\n                        factory.newString(\n                                BookStoreProps.WEBSITE\n                        )\n                }\n            );\n        }\n    )\n    .execute();\n'})})}),(0,s.jsx)(l.A,{value:"kotlin",label:"Kotlin",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:'val stores = listOf(\n    BookStore {\n        id = 1L\n        website = "https://www.oreilly.com"\n        // highlight-next-line\n        version = 0\n    },\n    BookStore {\n        id = 2L\n        website = "https://www.manning.com"\n        // highlight-next-line\n        version = 0\n    }\n)\n\nsqlClient.updateEntities(stores) {\n    setOptimisticLock(BookStore::class) {\n        sql("coalesce(length(%e), 0) <= length(%e)") {\n            expression(table.website)\n            expression(newNullable(BookStore::website))\n        }\n    }\n}\n'})})})]}),"\n",(0,s.jsx)(n.p,{children:"This generates the following SQL:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"update BOOK_STORE\nset\n    WEBSITE = ?,\n    -- highlight-next-line\n    VERSION = VERSION + 1\nwhere\n    ID = ?\nand\n    -- highlight-next-line\n    VERSION = ?\nand\n    -- highlight-next-line\n    coalesce(length(WEBSITE), 0) <= length(?)\n/* batch-0: [https://www.oreilly.com, 1, 0, https://www.oreilly.com] */\n/* batch-1: [https://www.manning.com, 2, 0, https://www.manning.com] */\n"})}),"\n",(0,s.jsx)(n.p,{children:"As you can see, both custom optimistic lock and built-in optimistic lock are in effect."}),"\n",(0,s.jsx)(n.h3,{id:"not-specifying-the-version-property",children:"Not Specifying the Version Property"}),"\n",(0,s.jsxs)(n.p,{children:["If the user doesn't specify the version property for the object being saved, by default, the built-in optimistic lock will be ignored.\nThis is no different from using ",(0,s.jsx)(n.a,{href:"#custom-optimistic-lock",children:"custom optimistic lock"})," directly, so discussing this scenario is meaningless."]}),"\n",(0,s.jsxs)(n.p,{children:["However, we can change this default behavior using ",(0,s.jsx)(n.code,{children:"UnloadedVersionBehavior.INCREASE"}),", as shown below:"]}),"\n",(0,s.jsxs)(r.A,{groupId:"language",children:[(0,s.jsx)(l.A,{value:"java",label:"Java",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'List<BookStore> stores = Arrays.asList(\n    Immutables.createBookStore(draft -> {\n        draft.setId(1L);\n        draft.setWebsite("https://www.oreilly.com");\n        // version not specified\n    }),\n    Immutables.createBookStore(draft -> {\n        draft.setId(2L);\n        draft.setWebsite("https://www.manning.com");\n        // version not specified\n    })\n);\n\nsqlClient\n    .saveEntitiesCommand(stores)\n    .setMode(SaveMode.UPDATE_ONLY)\n    .setOptimisticLock(\n        BookStoreTable.class,\n        // Increment version even if the version property\n        // is not specified for the saved entity\n        // highlight-next-line\n        UnloadedVersionBehavior.INCREASE,\n        (table, factory) -> {\n            return Predicate.sql(\n                "coalesce(length(%e), 0) <= length(%e)",\n                new Expression<?>[]{\n                        table.website(),\n                        factory.newString(\n                                BookStoreProps.WEBSITE\n                        )\n                }\n            );\n        }\n    )\n    .execute();\n'})})}),(0,s.jsx)(l.A,{value:"kotlin",label:"Kotlin",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:'val stores = listOf(\n    BookStore {\n        id = 1L\n        website = "https://www.oreilly.com"\n        // version not specified\n    },\n    BookStore {\n        id = 2L\n        website = "https://www.manning.com"\n        // version not specified\n    }\n)\n\nsqlClient.updateEntities(stores) {\n    setOptimisticLock(\n        BookStore::class,\n        // Increment version even if the version property\n        // is not specified for the saved entity\n        // highlight-next-line\n        UnloadedVersionBehavior.INCREASE\n    ) {\n        sql("coalesce(length(%e), 0) <= length(%e)") {\n            expression(table.website)\n            expression(newNullable(BookStore::website))\n        }\n    }\n}\n'})})})]}),"\n",(0,s.jsx)(n.p,{children:"This generates the following SQL:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"update BOOK_STORE\nset\n    WEBSITE = ?,\n    -- highlight-next-line\n    VERSION = VERSION + 1\nwhere\n    ID = ?\nand\n    coalesce(length(WEBSITE), 0) <= length(?)\n/* batch-0: [https://www.oreilly.com, 1, 0, https://www.oreilly.com] */\n/* batch-1: [https://www.manning.com, 2, 0, https://www.manning.com] */\n"})}),"\n",(0,s.jsx)(n.p,{children:"As you can see, although there is no version-related SQL condition, the version increment operation is still performed."})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},19365:(e,n,t)=>{t.d(n,{A:()=>r});t(96540);var i=t(34164);const s={tabItem:"tabItem_Ymn6"};var o=t(74848);function r(e){let{children:n,hidden:t,className:r}=e;return(0,o.jsx)("div",{role:"tabpanel",className:(0,i.A)(s.tabItem,r),hidden:t,children:n})}},11470:(e,n,t)=>{t.d(n,{A:()=>k});var i=t(96540),s=t(34164),o=t(23104),r=t(56347),l=t(205),a=t(57485),c=t(31682),d=t(70679);function h(e){return i.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,i.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function u(e){const{values:n,children:t}=e;return(0,i.useMemo)((()=>{const e=n??function(e){return h(e).map((e=>{let{props:{value:n,label:t,attributes:i,default:s}}=e;return{value:n,label:t,attributes:i,default:s}}))}(t);return function(e){const n=(0,c.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function p(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function m(e){let{queryString:n=!1,groupId:t}=e;const s=(0,r.W6)(),o=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,a.aZ)(o),(0,i.useCallback)((e=>{if(!o)return;const n=new URLSearchParams(s.location.search);n.set(o,e),s.replace({...s.location,search:n.toString()})}),[o,s])]}function g(e){const{defaultValue:n,queryString:t=!1,groupId:s}=e,o=u(e),[r,a]=(0,i.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!p({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const i=t.find((e=>e.default))??t[0];if(!i)throw new Error("Unexpected error: 0 tabValues");return i.value}({defaultValue:n,tabValues:o}))),[c,h]=m({queryString:t,groupId:s}),[g,x]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[s,o]=(0,d.Dv)(t);return[s,(0,i.useCallback)((e=>{t&&o.set(e)}),[t,o])]}({groupId:s}),b=(()=>{const e=c??g;return p({value:e,tabValues:o})?e:null})();(0,l.A)((()=>{b&&a(b)}),[b]);return{selectedValue:r,selectValue:(0,i.useCallback)((e=>{if(!p({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);a(e),h(e),x(e)}),[h,x,o]),tabValues:o}}var x=t(92303);const b={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var w=t(74848);function f(e){let{className:n,block:t,selectedValue:i,selectValue:r,tabValues:l}=e;const a=[],{blockElementScrollPositionUntilNextRender:c}=(0,o.a_)(),d=e=>{const n=e.currentTarget,t=a.indexOf(n),s=l[t].value;s!==i&&(c(n),r(s))},h=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const t=a.indexOf(e.currentTarget)+1;n=a[t]??a[0];break}case"ArrowLeft":{const t=a.indexOf(e.currentTarget)-1;n=a[t]??a[a.length-1];break}}n?.focus()};return(0,w.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.A)("tabs",{"tabs--block":t},n),children:l.map((e=>{let{value:n,label:t,attributes:o}=e;return(0,w.jsx)("li",{role:"tab",tabIndex:i===n?0:-1,"aria-selected":i===n,ref:e=>a.push(e),onKeyDown:h,onClick:d,...o,className:(0,s.A)("tabs__item",b.tabItem,o?.className,{"tabs__item--active":i===n}),children:t??n},n)}))})}function j(e){let{lazy:n,children:t,selectedValue:o}=e;const r=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=r.find((e=>e.props.value===o));return e?(0,i.cloneElement)(e,{className:(0,s.A)("margin-top--md",e.props.className)}):null}return(0,w.jsx)("div",{className:"margin-top--md",children:r.map(((e,n)=>(0,i.cloneElement)(e,{key:n,hidden:e.props.value!==o})))})}function v(e){const n=g(e);return(0,w.jsxs)("div",{className:(0,s.A)("tabs-container",b.tabList),children:[(0,w.jsx)(f,{...n,...e}),(0,w.jsx)(j,{...n,...e})]})}function k(e){const n=(0,x.A)();return(0,w.jsx)(v,{...e,children:h(e.children)},String(n))}},28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>l});var i=t(96540);const s={},o=i.createContext(s);function r(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);